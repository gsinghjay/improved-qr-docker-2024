"""Service module for handling QR code business logic.

This module provides a service layer that handles the business logic for
QR code operations including creation, updating, deletion, and validation.
"""

import re
from pathlib import Path
from datetime import datetime
import validators
from urllib.parse import urlparse
from ..models.qr_code import QRCode
from ..models import db
from ..utils.qr_generator import generate_qr_code, is_valid_url

class QRCodeService:
    """Service class for handling QR code operations."""
    
    @staticmethod
    def create_qr_code(url, is_dynamic, fill_color, back_color, description, qr_code_dir):
        """Create a new QR code record and generate the QR code image.
        
        Args:
            url (str): The URL to encode in the QR code
            is_dynamic (bool): Whether this is a dynamic QR code
            fill_color (str): Color for the QR code pattern
            back_color (str): Background color for the QR code
            description (str): Optional description of the QR code
            qr_code_dir (str): Directory to store the QR code image
            
        Returns:
            tuple: (QRCode, Path) The created QR code object and the path to the image
        """
        qr_code = QRCode(
            url=url,
            fill_color=fill_color,
            back_color=back_color,
            description=description,
            is_dynamic=is_dynamic
        )
        
        # Filename will be auto-generated by the model's __init__
        path = Path(qr_code_dir) / qr_code.filename
        
        db.session.add(qr_code)
        db.session.commit()

        return qr_code, path

    @staticmethod
    def update_qr_code(qr_code, url, fill_color, back_color, description, filename, is_active, qr_code_dir):
        """Update an existing QR code record and regenerate the image if needed."""
        # Validate new filename if provided
        if filename and filename != qr_code.filename:
            if not QRCodeService.validate_filename(filename):
                raise ValueError("Invalid filename format")
        
        old_filename = qr_code.filename
        qr_code_dir = Path(qr_code_dir)  # Convert to Path object
        
        # Update QR code attributes
        qr_code.url = url
        qr_code.fill_color = fill_color
        qr_code.back_color = back_color
        qr_code.description = description
        qr_code.is_active = is_active

        # Handle filename update if provided
        if filename and filename != old_filename:
            old_path = qr_code_dir / old_filename
            new_path = qr_code_dir / filename
            
            # Update filename in database
            qr_code.filename = filename
            
            # Rename physical file if it exists
            if old_path.exists():
                old_path.rename(new_path)
        
        db.session.commit()

        # Regenerate QR code image
        path = qr_code_dir / qr_code.filename
        if not qr_code.is_dynamic:
            generate_qr_code(qr_code.url, path, qr_code.fill_color, qr_code.back_color)

        return qr_code

    @staticmethod
    def validate_filename(filename):
        """Validate if a filename is properly formatted.
        
        Args:
            filename (str): Filename to validate
            
        Returns:
            bool: True if filename is valid, False otherwise
        """
        # Allow letters, numbers, hyphens, underscores, and .png extension
        pattern = r'^[a-zA-Z0-9_-]+\.png$'
        return bool(re.match(pattern, filename))

    @staticmethod
    def delete_qr_code(qr_code, qr_code_dir):
        """Delete a QR code record and its associated image file."""
        path = Path(qr_code_dir) / qr_code.filename
        if path.exists():
            path.unlink()
            
        db.session.delete(qr_code)
        db.session.commit()

    @staticmethod
    def increment_access_count(qr_code):
        """Increment the access count for a QR code."""
        qr_code.access_count += 1
        db.session.commit()

    @staticmethod
    def validate_url(url):
        """Validate if a URL is properly formatted and uses allowed protocols.
        
        Args:
            url (str): URL to validate
            
        Returns:
            bool: True if URL is valid, False otherwise
        """
        if not url:
            return False
        
        try:
            # Parse URL to check protocol
            parsed = urlparse(url)
            if parsed.scheme not in ('http', 'https'):
                return False
                
            # Validate URL format
            return bool(validators.url(url))
            
        except Exception:
            return False

    @staticmethod
    def generate_qr_image(url, path, fill_color, back_color):
        """Generate a QR code image file."""
        return generate_qr_code(url, path, fill_color, back_color) 